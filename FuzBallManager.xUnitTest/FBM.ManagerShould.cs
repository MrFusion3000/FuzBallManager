using ApiClient;
using Application;
using Application.Responses;
using Domain.Entities;
using System;
using System.Collections.Generic;
using UIConsole;
using Xunit;
using Xunit.Abstractions;

namespace xUnitTest
{

    public class ManagerShould //: IDisposable
    {
        // *** Start API first in Package Manager | 'cd FuzBallManager.API' | 'dotnet run' ***
        private readonly ITestOutputHelper _output;

        //private readonly Manager _sut;

        public ManagerShould(ITestOutputHelper output)
        {
            _output = output;

            //_sut = ManagerClient.GetManagerByName(managerName);
        }

        //public void Dispose()
        //{
        //    _output.WriteLine($"Disposing UserManager {_sut.Name}");
            
        //}

        [Fact]
        public async void HaveAName()
        {
            //Fetch the Managers Name

            //Arrange
            string managerName = "Lord Manager";
            ManagerResponse teamManager = await ManagerClient.GetManagerByName(managerName);

            //Act
            string expected = "Lord Manager";
            string? actual = teamManager.Name;

            //Assert
            Assert.Equal(expected, actual);
            _output.WriteLine($"Manager has name: {teamManager.Name}");
        }

        [Fact]
        public async void HaveATeamWithID()
        {
            //Fetch the Managers Name

            //Arrange
            string managerName = "Lord Manager";
            ManagerResponse teamManager = await ManagerClient.GetManagerByName(managerName);

            //Act
            Guid expected = Guid.Parse("b5d4e653-7e8d-ec11-8465-244bfe57fd18");
            Guid actual = teamManager.ManagingTeamID;

            //Assert
            Assert.Equal(expected, actual);
            _output.WriteLine($"Manager has Id: {teamManager.ManagerID}");
        }

        [Fact]
        public async void HaveATeamNameAssociatedWithID()
        {
            //Fetch the Managers Name

            //Arrange
            string managerName = "Lord Manager";
            ManagerResponse teamManager = await ManagerClient.GetManagerByName(managerName);
            TeamResponse Team = await TeamClient.GetTeamById(teamManager.ManagingTeamID);

            //Act
            string expected = "Manchester United";
            string? actual = Team.TeamName;

            //Assert
            Assert.Equal(expected, actual, ignoreCase: true);
            _output.WriteLine($"Manager has name: {teamManager.Name} with associated Id: {teamManager.ManagerID}");
        }

        [Fact]
        public async void NotHaveWrongTeamName()
        {
            //Arrange
            Guid managedTeamId = Guid.Parse("b5d4e653-7e8d-ec11-8465-244bfe57fd18");
            TeamResponse managedTeam = await TeamClient.GetTeamById(managedTeamId);

            //Act
            string expected = "Manchester City";
            string? actual = managedTeam.TeamName;

            //Assert
            Assert.NotEqual(expected, actual);
            
        }

        [Fact]
        public async void HaveManagerNameIncludeOnlyInternationalAlphaCharsWithCapitalFirsts()
        {
            //Arrange
            //string managerName = "Lord Manager";
            Guid managedTeamId = Guid.Parse("b5d4e653-7e8d-ec11-8465-244bfe57fd18");
            //ManagerResponse teamManager = await ManagerClient.GetManagerByName(managerName);
            TeamResponse managedTeam = await TeamClient.GetTeamById(managedTeamId);

            //Act
            managedTeam.TeamName = "Manchester City";
            string? actual = managedTeam.TeamName;

            //Assert
            Assert.Matches("[A-Z[a-z]+ [A-Z[a-z]+", actual);
            _output.WriteLine($"Manager has name: {managedTeam.TeamName} with first letters uppercase");

        }

        //TODO NotBeInListOfOppositeTeams
        //[Fact]
        //public async void NotBeInListOfOpposiongTeams()
        //{
        //    //Arrange
        //    List<TeamResponse> teams = await TeamClient.GetAllTeams();
        //    var managedTeamId = Guid.NewGuid();
        //    var opposingTeams = GetOpposingTeams.GetOppTeams(teams, managedTeamId);

        //    //Act

        //    //Assert
        //    Assert.DoesNotContain(managedTeamId, opposingTeams);

        //}


        //TODO HaveAInitialBankof50000
        //TODO HaveAnInitialScoreOf0

        //TODONTH - HaveADateOfBirth(Autogenerated or input from user)

    }
}
