using ApiClient;
using Application.Responses;
using System;
using System.Threading.Tasks;
using Xunit;
using Xunit.Abstractions;

namespace xUnitTest
{
    public class ManagerShould //: IDisposable
    {
        // *** Start API first in Package Manager : 'cd FuzBallManager.API' | 'dotnet run' ***
        // Manager tests pass if only this group is run due to (possibly) DB threading
        private readonly ITestOutputHelper output;

        public ManagerShould(ITestOutputHelper output)
        {
            this.output = output;
        }

        //public void Dispose()
        //{
        //    _output.WriteLine($"Disposing UserManager {_sut.Name}");

        //}

        [Fact]
        public async Task HaveAName()
        {
            //Fetch the Managers Name

            //Arrange
            string managerName = "Lord Manager";
            ManagerResponse? _sutManagerHaveName = await ManagerClient.GetManagerByName(managerName);

            //Act
            string expected = "Lord Manager";
            string? actual = _sutManagerHaveName.Name;

            //Assert
            Assert.Equal(expected, actual);
            output.WriteLine($"Manager has name: {_sutManagerHaveName.Name}");
        }

        [Fact]
        public async Task HaveATeamWithID()
        {
            //Arrange
            string managerName = "Lord Manager";
            ManagerResponse _sut = await ManagerClient.GetManagerByName(managerName);
            //await Task.Delay(3000);

            //Act
            Guid expected = Guid.Parse("b5d4e653-7e8d-ec11-8465-244bfe57fd18");
            Guid actual = _sut.ManagingTeamID;

            //Assert
            Assert.Equal(expected, actual);
            output.WriteLine($"Manager has Id: {_sut.ManagerID}");
        }

        [Fact]
        public async Task HaveATeamNameAssociatedWithID()
        {
            //Arrange
            string managerName = "Lord Manager";
            ManagerResponse _sut = await ManagerClient.GetManagerByName(managerName);
            TeamResponse _sut2 = await TeamClient.GetTeamById(_sut.ManagingTeamID);

            //Act
            string expected = "Manchester United";
            string? actual = _sut2.TeamName;

            //Assert
            Assert.Equal(expected, actual, ignoreCase: true);
            output.WriteLine($"Manager has name: {_sut.Name} with associated Id: {_sut.ManagerID}");
        }

        [Fact]
        public async Task NotHaveWrongTeamName()
        {
            //Arrange
            Guid managedTeamId = Guid.Parse("b5d4e653-7e8d-ec11-8465-244bfe57fd18");
            TeamResponse _sut2 = await TeamClient.GetTeamById(managedTeamId);

            //Act
            string expected = "Manchester City";
            string? actual = _sut2.TeamName;

            //Assert
            Assert.NotEqual(expected, actual);
            output.WriteLine($"Team has name: {_sut2.TeamName} and not: {expected}");

        }

        [Fact]
        public async Task HaveManagerNameIncludeOnlyInternationalAlphaCharsWithCapitalFirsts()
        {
            //Arrange
            //string managerName = "Lord Manager";
            //ManagerResponse _sut = await ManagerClient.GetManagerByName(managerName);

            Guid managedTeamId = Guid.Parse("b5d4e653-7e8d-ec11-8465-244bfe57fd18");
            TeamResponse _sut2 = await TeamClient.GetTeamById(managedTeamId);

            //Act
            _sut2.TeamName = "Manchester City";
            string? actual = _sut2.TeamName;

            //Assert
            Assert.Matches("[A-Z[a-z]+ [A-Z[a-z]+", actual);
            output.WriteLine($"Manager has name: {_sut2.TeamName} with first letters uppercase");

        }

        //TODO NotBeInListOfOppositeTeams
        //[Fact]
        //public async void NotBeInListOfOpposiongTeams()
        //{
        //    //Arrange
        //    List<TeamResponse> teams = await TeamClient.GetAllTeams();
        //    var managedTeamId = Guid.NewGuid();
        //    var opposingTeams = GetOpposingTeams.GetOppTeams(teams, managedTeamId);

        //    //Act

        //    //Assert
        //    Assert.DoesNotContain(managedTeamId, opposingTeams);

        //}


        //TODO HaveAInitialBankof50000
        //TODO HaveAnInitialScoreOf0

        //TODONTH - HaveADateOfBirth(Autogenerated or input from user)

    }
}
